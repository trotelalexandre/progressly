generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  passwordHash  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  Authenticator Authenticator[]
  budgets       Budget[]
  habits        Habit[]
  investments   Investment[]
  readings      Reading[]
  sessions      Session[]
  Transaction   Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Habit {
  id            String   @id @default(uuid())
  userId        String
  name          String
  completedDays Int[]
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id           String      @id @default(uuid())
  userId       String
  category     String
  amount       Float
  date         DateTime    @default(now())
  type         String
  investmentId String?
  Investment   Investment? @relation(fields: [investmentId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Budget {
  id          String @id @default(uuid())
  userId      String
  month       Int
  year        Int
  income      Float
  expenses    Float
  investments Float
  savings     Float
  user        User   @relation(fields: [userId], references: [id])
}

model Investment {
  id           String        @id @default(uuid())
  userId       String
  name         String
  category     String
  buyPrice     Float
  quantity     Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Reading {
  id          String  @id @default(uuid())
  userId      String
  title       String
  totalPages  Int
  currentPage Int
  isCompleted Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
}

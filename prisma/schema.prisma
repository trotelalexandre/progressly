// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  habits      Habit[]
  budgets     Budget[]
  investments Investment[]
  readings    Reading[]
  // Optional for WebAuthn support

  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Habit Tracking
model Habit {
  id            String   @id @default(uuid())
  userId        String
  name          String
  completedDays Int[]
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

// Budget and Transactions
model Transaction {
  id           String      @id @default(uuid())
  userId       String
  category     String
  amount       Float
  date         DateTime    @default(now())
  type         String // "income" or "expense"
  user         User        @relation(fields: [userId], references: [id])
  Investment   Investment? @relation(fields: [investmentId], references: [id])
  investmentId String?
}

model Budget {
  id          String @id @default(uuid())
  userId      String
  month       Int
  year        Int
  income      Float
  expenses    Float
  investments Float
  savings     Float
  user        User   @relation(fields: [userId], references: [id])
}

// Investment Tracking
model Investment {
  id           String        @id @default(uuid())
  userId       String
  name         String
  category     String
  buyPrice     Float
  quantity     Int
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
}

// Reading Progress
model Reading {
  id          String  @id @default(uuid())
  userId      String
  title       String
  totalPages  Int
  currentPage Int
  isCompleted Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
}

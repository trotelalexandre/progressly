generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  passwordHash   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  emailVerified  DateTime?
  image          String?
  name           String?
  accounts       Account[]
  authenticators Authenticator[]
  budgets        Budget[]
  habits         Habit[]
  investments    Investment[]
  readings       Reading[]
  sessions       Session[]
  transactions   Transaction[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@index([userId])
}

model Habit {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  completedDays Int[]
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  category     String
  amount       Float
  date         DateTime    @default(now())
  type         String
  investmentId String?     @db.ObjectId
  investment   Investment? @relation(fields: [investmentId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@index([userId, category, date])
}

model Budget {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  month       Int
  year        Int
  income      Float
  expenses    Float
  investments Float
  savings     Float
  user        User   @relation(fields: [userId], references: [id])

  @@index([userId, year, month])
}

model Investment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  name         String
  category     String
  buyPrice     Float
  quantity     Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([userId, category])
}

model Reading {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  title       String
  totalPages  Int
  currentPage Int
  isCompleted Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])

  @@index([userId, isCompleted])
}
